import json
import os
import streamlit as st
import time
from datetime import datetime, timedelta
import requests
import re
import streamlit.components.v1 as components
from pymongo import MongoClient
st.set_page_config(page_title="SEARCH ENGINER", page_icon="üé¨", layout="wide")
url = "https://02fb-117-6-40-134.ngrok-free.app"

class CollectionWrapper:
    def __init__(self):
        # D√πng danh s√°ch ƒë·ªÉ l∆∞u tr·ªØ c√°c t√†i li·ªáu (t∆∞∆°ng t·ª± nh∆∞ MongoDB)
        self.data = self.load_data()  # T·∫£i d·ªØ li·ªáu t·ª´ file JSON
        self.current_id = max([item['_id'] for item in self.data], default=0) + 1 if self.data else 1

    def load_data(self):
        response = requests.post(url+"/account")
        results = response.json()  
    
        return results
    def save_data(self):
        response = requests.post(url+"/save", json=self.data)
    def insert_one(self, document):
        """Ch√®n m·ªôt t√†i li·ªáu m·ªõi v√†o collection."""
        document['_id'] = self.current_id  # G√°n _id t·ª± ƒë·ªông
        self.data.append(document)
        self.current_id += 1
        return {"inserted_id": document['_id']}

    def find_one(self, query):
        """T√¨m m·ªôt t√†i li·ªáu d·ª±a tr√™n query."""
        for document in self.data:
            if all(document.get(k) == v for k, v in query.items()):
                return document
        return None

    def update_one(self, query, update_data):
        """C·∫≠p nh·∫≠t t√†i li·ªáu ƒë·∫ßu ti√™n t√¨m th·∫•y d·ª±a tr√™n query."""
        for document in self.data:
            if all(document.get(k) == v for k, v in query.items()):
                document.update(update_data)
                return {"matched_count": 1, "modified_count": 1}
        return {"matched_count": 0, "modified_count": 0}

    def delete_one(self, query):
        """X√≥a t√†i li·ªáu ƒë·∫ßu ti√™n t√¨m th·∫•y d·ª±a tr√™n query."""
        for i, document in enumerate(self.data):
            if all(document.get(k) == v for k, v in query.items()):
                del self.data[i]
                return {"deleted_count": 1}
        return {"deleted_count": 0}

# S·ª≠ d·ª•ng class CollectionWrapper thay th·∫ø MongoDB collection
collection = CollectionWrapper()


#############################################################################################################
#############################################################################################################
#############################################################################################################
#############################################################################################################
#############################################################################################################
#############################################################################################################
#############################################################################################################
#############################################################################################################
#############################################################################################################
# c√†i ƒë·∫∑t tr∆∞·ªõc

box_style = """
    <div style="
        border: 2px solid #45434c; 
        padding: 10px; 
        border-radius: 5px; 
        background-color: #45434c; 
        height: 300px; 
        overflow-y: auto; 
        overflow-x: hidden; 
        white-space: pre-wrap;">
        {content}
    </div>
"""
# Th√™m CSS ƒë·ªÉ ƒë·ªãnh d·∫°ng button

st.markdown("""
    <style>
    .stSidebar .stButton button {
        width: 100%;
        border-radius: 5px; /* B·ªè bo g√≥c */
        background-color: #262730; /* M√†u n·ªÅn x√°m ƒëen */
        color: white; /* M√†u ch·ªØ tr·∫Øng */
        border: 1px solid #1e1f26; /* Vi·ªÅn m√†u x√°m nh·∫°t h∆°n */
        padding: 10px;
        font-size: 16px;
        text-align: left; /* CƒÉn l·ªÅ ch·ªØ sang ph·∫£i */
        margin-bottom: 0px;
        display: flex;
        justify-content: flex-start; /* ƒê∆∞a n·ªôi dung v·ªÅ b√™n ph·∫£i */
    }
    .stSidebar .stButton button:hover {
        background-color: #1e1f26; /* Hi·ªáu ·ª©ng n·ªÅn khi hover */
    }
    .stSidebar .stButton {
        margin-bottom: 0px; /* Lo·∫°i b·ªè kho·∫£ng c√°ch gi·ªØa c√°c button */
    }
    </style>
    """, unsafe_allow_html=True)

st.markdown("""
    <style>
    .divider {
        display: flex;
        align-items: center;
        text-align: center;
        margin: 0px 0;
        color: #ffffff;
    }
    .divider::before,
    .divider::after {
        content: "";
        flex: 1;
        border-top: 1px solid #ffffff;
        margin: 0 0px;
    }
    .divider span {
        font-weight: bold;
    }
    .custom-divider {
        border-top: 2px solid #1e1f26; /* ƒêo·∫°n k·∫ª m√†u ƒë·∫≠m h∆°n */
        margin: 0; /* Kh√¥ng c√≥ kho·∫£ng c√°ch */
        padding: 0; /* Kh√¥ng c√≥ padding */
    }
    </style>
    """, unsafe_allow_html=True)
_LOREM_IPSUM = '''
H√¢n h·∫°nh ƒë∆∞·ª£c g·∫∑p b·∫°n, t√¥i l√† ph·∫ßn m·ªÅm t√¨m ki·∫øm video Youtube b·∫±ng h·ªá th·ªëng Bigdata d·ª±a v√†o d·ªØ li·ªáu ph·ª• ƒë·ªÅ Youtube\n
B·∫°n ch·ªâ vi·ªác nh·∫•n t·ª´ kh√≥a v√†o √¥ t√¨m ki·∫øm v√† nh√¢n t√¨m ki·∫øm s·∫Ω cho b·∫°n ƒë√¢y ƒë·ªß th√¥ng tin v·ªÅ c√°c video b·∫°n c·∫ßn t√¨m\n
B·∫°n c√≥ th·ªÉ nh·∫•n v√†o c√°c t·ª´ kh√≥a ·ªü ph·∫ßn l·ªãch s·ª≠ ƒë·ªÉ m·ªü l·∫°i c√°c t·ª´ kh√≥a m√† b·∫£n th√¢n ƒë√£ t√¨m ki·∫øm tr∆∞·ªõc ƒë√≥\n
Khi c√≥ k·∫øt qu·∫£, b·∫°n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh s·ªï l∆∞·ª£ng video, ng√†y th√°ng xu·∫•t b·∫£n ƒë·ªÉ ph√π h·ª£p √Ω ƒë·ªãnh c·ªßa b·∫£n th√¢n\n
Ngo√†i ra b·∫°n c√≥ th·ªÉ xem ƒë∆∞·ª£c video, ph·ª• ƒë·ªÅ v√† ch·ªâ s·ªë t∆∞∆°ng th√≠ch v·ªõi c√°c t·ª´ kh√≥a m√† b·∫°n ƒë√£ ƒë∆∞a ra\n
Cu·ªëi c√πng xin ch√∫c b·∫°n c√≥ m·ªôt ng√†y l√†m vi·ªác su√¥n s·∫ª v√† thu·∫≠n l·ª£i!'''
_LOREM_IPSUM_LOGIN = '''
Xin ch√†o, t√¥i l√† ph·∫ßn m·ªÅm t√¨m ki·∫øm video Youtube b·∫±ng h·ªá th·ªëng Bigdata d·ª±a v√†o d·ªØ li·ªáu ph·ª• ƒë·ªÅ Youtube\n
B·∫°n h√£y ƒëƒÉng nh·∫≠p ƒë·ªÉ tr·∫£i nghi·ªám ƒë·∫ßy ƒë·ªß nh·∫•t v·ªÅ ti·ªán √≠ch c·ªßa ch√∫ng t√¥i.!!!!!\n
'''
linkedin = "https://raw.githubusercontent.com/sahirmaharaj/exifa/main/img/linkedin.gif"
topmate = "https://raw.githubusercontent.com/sahirmaharaj/exifa/main/img/topmate.gif"
email = "https://raw.githubusercontent.com/sahirmaharaj/exifa/main/img/email.gif"
newsletter = ("https://raw.githubusercontent.com/sahirmaharaj/exifa/main/img/newsletter.gif")
share = "https://raw.githubusercontent.com/sahirmaharaj/exifa/main/img/share.gif"
caption =     f"""
        <div style='display: flex; align-items: center;'>
            <a href = 'https://www.instagram.com/k.pear29/'><img src='{linkedin}' style='width: 35px; height: 35px; margin-right: 25px;'></a>
            <a href = 'https://web.facebook.com/profile.php?id=100090786036344'><img src='{topmate}' style='width: 32px; height: 32px; margin-right: 25px;'></a>
            <a href = 'mailto:lka7b6c73@gmail.com'><img src='{email}' style='width: 28px; height: 28px; margin-right: 25px;'></a>
            <a href = 'https://web.facebook.com/tuyet.phamanh.336'><img src='{newsletter}' style='width: 28px; height: 28px; margin-right: 25px;'></a>
            <a href = 'https://www.kaggle.com/gqqdluck'><img src='{share}' style='width: 28px; height: 28px; margin-right: 25px;'></a>
        </div>       
        """
#############################################################################################################
#############################################################################################################
#############################################################################################################
#############################################################################################################
#############################################################################################################
#############################################################################################################
#############################################################################################################
#############################################################################################################
#############################################################################################################
#c√°c session_state
if 'create_user' not in st.session_state:
    st.session_state.create_user = False
if 'delete_user' not in st.session_state:
    st.session_state.delete_user= False
if 'show_message_login' not in st.session_state:
    st.session_state.show_message_login = True
if 'id' not in st.session_state:
    st.session_state.id = None
if 'username' not in st.session_state:
    st.session_state.username = None
if 'password' not in st.session_state:
    st.session_state.password = None   
if 'logged_in' not in st.session_state:
    st.session_state.logged_in = False
if 'account' not in st.session_state:
    st.session_state.account = False

#### giao di·ªán client
if 'len_results' not in st.session_state:
    st.session_state.len_results = None
if 'search_results' not in st.session_state:
    st.session_state.search_results = None
if 'time_load' not in st.session_state:
    st.session_state.time_load = 0
if 'time_search' not in st.session_state:
    st.session_state.time_search = 0    
if 'search_triggered' not in st.session_state:
    st.session_state.search_triggered = False
if 'query' not in st.session_state:
    st.session_state.query = None
if "show_animation" not in st.session_state:
    st.session_state.show_animation = True
if "show_message" not in st.session_state:
    st.session_state.show_message = True
if "show_404" not in st.session_state:
    st.session_state.show_404 = False
if "show_animation" not in st.session_state:
    st.session_state.show_animation = True



#############################################################################################################
#############################################################################################################
#############################################################################################################
#############################################################################################################
#############################################################################################################
#############################################################################################################
#############################################################################################################
#############################################################################################################
#############################################################################################################
                                        
def account_info():
    with st.form(key="edit_account"):
        st.subheader("Th√¥ng tin t√†i kho·∫£n")
        st.write(f"T√™n ƒëƒÉng nh·∫≠p: {st.session_state.username}")
        st.write(f"M·∫≠t kh·∫©u: {'*' * len(st.session_state.password)}")

        new_password = st.text_input("Nh·∫≠p m·∫≠t kh·∫©u m·ªõi", type="password")
        if st.form_submit_button("ƒê·ªïi m·∫≠t kh·∫©u"):
            if new_password:
                collection.update_one({"_id": st.session_state.id}, {"$set": {"password": new_password}})
                st.session_state.password = new_password
                st.success("M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·ªïi th√†nh c√¥ng!")
                st.rerun()
        lcol1,lcol2 = st.columns([1,1])
        with lcol1:
            if st.form_submit_button("X√≥a t√†i kho·∫£n"):
                st.session_state.delete_user = True
        
        with lcol2:
            if st.session_state.delete_user:
                if st.form_submit_button("X√°c nh·∫≠n x√≥a t√†i kho·∫£n"):
                    collection.delete_one({"_id": st.session_state.id})
                    collection.save_data()
                    st.sidebar.success("T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!. T·ª± ƒë·ªông ƒëƒÉng xu·∫•t sau 3s")
                    time.sleep(3)
                    st.session_state.logged_in = False
                    st.session_state.account = False
                    st.session_state.show_animation = True
                    st.session_state.show_message = True
                    st.rerun()

        if st.form_submit_button("ƒêƒÉng xu·∫•t"):
            st.session_state.logged_in = False
            st.session_state.show_animation = True
            st.session_state.show_message = True
            st.session_state.account = False
            st.session_state.search_triggered = False    
            collection.save_data() 
            st.rerun()


# C√°c h√†m ƒë·ªÉ l·∫•y URL h√¨nh ·∫£nh thu nh·ªè v√† URL video

def get_video_thumbnail(video_id):
    thumbnail_url = f"https://i.ytimg.com/vi/{video_id}/default.jpg"
    return thumbnail_url

def get_video_link(video_id):
    youtube_url = f"https://www.youtube.com/watch?v={video_id}"
    return youtube_url

# H√†m ƒë·ªãnh d·∫°ng th·ªùi gian xu·∫•t b·∫£n th√†nh gi·ªù:ph√∫t:gi√¢y ng√†y-th√°ng-nƒÉm
def format_publish_time(publish_time_str):
    publish_time = datetime.strptime(publish_time_str, "%Y-%m-%dT%H:%M:%SZ")
    return publish_time.strftime("%H:%M:%S %d-%m-%Y")

# H√†m t√≠nh th·ªùi gian ∆∞·ªõc ch·ª´ng t·ª´ hi·ªán t·∫°i
def time_since_publish(publish_time_str):
    publish_time = datetime.strptime(publish_time_str, "%Y-%m-%dT%H:%M:%SZ")
    time_diff = datetime.utcnow() - publish_time

    if time_diff < timedelta(minutes=1):
        return "v·ª´a xong"
    elif time_diff < timedelta(hours=1):
        minutes = int(time_diff.total_seconds() // 60)
        return f"{minutes} ph√∫t tr∆∞·ªõc"
    elif time_diff < timedelta(days=1):
        hours = int(time_diff.total_seconds() // 3600)
        return f"{hours} gi·ªù tr∆∞·ªõc"
    elif time_diff < timedelta(days=30):
        days = time_diff.days
        return f"{days} ng√†y tr∆∞·ªõc"
    elif time_diff < timedelta(days=365):
        months = time_diff.days // 30
        return f"{months} th√°ng tr∆∞·ªõc"
    else:
        years = time_diff.days // 365
        return f"{years} nƒÉm tr∆∞·ªõc"

def preprocess_subtitles(subtitles, search_terms):
    # T√°ch c√°c c·ª•m t·ª´ t√¨m ki·∫øm d·ª±a tr√™n d·∫•u ph·∫©y
    phrases = search_terms.split(',')
    
    # Lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a ·ªü ƒë·∫ßu v√† cu·ªëi m·ªói phrase
    phrases = [phrase.strip() for phrase in phrases]
    # Danh s√°ch c√°c m√†u ƒë·ªÉ √°p d·ª•ng cho m·ªói phrase
    colors = [
    "rgb(204, 51, 0)",     # ƒê·ªè cam t·ªëi h∆°n n·ªØa
    "rgb(0, 77, 153)",     # Xanh d∆∞∆°ng t·ªëi h∆°n n·ªØa
    "rgb(26, 94, 26)",     # Xanh l√° t·ªëi h∆°n n·ªØa
    "rgb(184, 77, 91)",    # H·ªìng t·ªëi h∆°n n·ªØa
    "rgb(204, 102, 0)",    # Cam t·ªëi h∆°n n·ªØa
    "rgb(51, 0, 102)"      # T√≠m t·ªëi h∆°n n·ªØa
    ]
    # T·∫°o m·ªôt t·ª´ ƒëi·ªÉn ƒë·ªÉ l∆∞u s·ªë l·∫ßn kh·ªõp cho m·ªói c·ª•m t·ª´
    match_counts = {}
    phrase_colors = {}
    for i, phrase in enumerate(phrases):
        # T√¨m t·∫•t c·∫£ c√°c c·ª•m t·ª´ trong ph·ª• ƒë·ªÅ (kh√¥ng ph√¢n bi·ªát ch·ªØ hoa ch·ªØ th∆∞·ªùng)
        matches = re.findall(re.escape(phrase), subtitles, flags=re.IGNORECASE)
        count = len(matches)
        
        # C·∫≠p nh·∫≠t t·ª´ ƒëi·ªÉn v·ªõi s·ªë l·∫ßn kh·ªõp
        match_counts[phrase] = count
        
        # √Åp d·ª•ng m√†u t·ª´ danh s√°ch, d√πng modulo ƒë·ªÉ l·∫∑p l·∫°i n·∫øu h·∫øt m√†u
        color = colors[i % len(colors)]
        phrase_colors[phrase] = color
        
        # Highlight c√°c c·ª•m t·ª´ trong ph·ª• ƒë·ªÅ, gi·ªØ nguy√™n ƒë·ªãnh d·∫°ng ch·ªØ
        subtitles = re.sub(
            re.escape(phrase),
            lambda m: f'<span style="background-color: {color}; font-weight: bold;">{m.group(0)}</span>',
            subtitles,
            flags=re.IGNORECASE
        )
    return subtitles, match_counts, phrase_colors

# B·ªô d·ªØ li·ªáu
data = [ ]
def get_subtitles(id):
    subtitles_url = url+ f"/get_subtitle_by_id?id={id}"
    response = requests.post(subtitles_url)
    return response.json()['subtitle']

@st.dialog('SHOW VIDEO YOUTUBE',width=1920)
def show_video(video_url):
    st.video(video_url, loop=False, autoplay=True, muted=False)

# H√†m t√¨m ki·∫øm video
def search_videos(query):
    data = {
        "paragraph": query,
            }
    response = requests.post(url+"/get_main_search", json=data)
    results = response.json()  
    # L·∫•y d·ªØ li·ªáu k·∫øt qu·∫£ v√† th·ªùi gian t·∫£i
    len = results.get("len",0)
    videos = results.get("result", [])
    time_load = results.get("time_load", 0)
    time_search = results.get("time_search", 0)
    return  time_load, time_search,len,videos



# H√†m ƒë·ªÉ l∆∞u k·∫øt qu·∫£ t√¨m ki·∫øm v√†o session_state
def update_search_history(results):   
    # L∆∞u k·∫øt qu·∫£ t√¨m ki·∫øm v√†o l·ªãch s·ª≠, gi·ªØ t·ªëi ƒëa 10 m·ª•c
    st.session_state.history.insert(0, results)  # Th√™m v√†o ƒë·∫ßu danh s√°ch
    if len(st.session_state.history) > 10:
        st.session_state.history.pop() 
    collection.update_one({"_id": st.session_state.id}, {"$set": {"history":st.session_state.history}})
    

def click_button():   
    st.session_state.account = False
    search_data = search_videos(st.session_state.query) 
    if search_data[0]:
        st.session_state.search_triggered = True
        st.session_state.time_load, st.session_state.time_search, st.session_state.len_results,st.session_state.search_results  = search_data
        st.session_state.info = (st.session_state.query,st.session_state.time_load, st.session_state.time_search, st.session_state.len_results,st.session_state.search_results)
        update_search_history(st.session_state.info)
    else:
        st.session_state.search_triggered = False
        st.session_state.show_404 = True
        print(st.session_state.show_404)

def download_subtitles(subtitles, filename):
    st.download_button(
        label="üì©",
        data=subtitles,
        file_name=filename,
        mime="text/plain"
    )


def delete_history_item(index):
    if 'history' in st.session_state:
        del st.session_state.history[index]

def stream_data():
    for word in _LOREM_IPSUM.split(" "):
        yield word + " "
        time.sleep(0.03)

def stream_data_login():
    for word in _LOREM_IPSUM_LOGIN.split(" "):
        yield word + " "
        time.sleep(0.03)
#############################################################################################################
#############################################################################################################
#############################################################################################################
#############################################################################################################
#############################################################################################################
#############################################################################################################
#############################################################################################################
#############################################################################################################
#############################################################################################################
#### giao di·ªán ƒëƒÉng nh·∫≠p
if not st.session_state.logged_in:
    if not st.session_state.create_user:
        # T·∫°o giao di·ªán ƒëƒÉng nh·∫≠p
        st.sidebar.markdown(
        """
        <h2 style='display: flex; align-items: center;'>
            <img src='https://media.giphy.com/media/HMdPmZ6wwlo0idI2PH/giphy.gif' 
            width='50' height='50' style='margin-right: 0px;'/> 
            <span style='font-weight: bold; width: 100%;'>ƒêƒÇNG NH·∫¨P</span>
        </h2>
        """, 
        unsafe_allow_html=True)

        username = st.sidebar.text_input("T√™n ƒëƒÉng nh·∫≠p")
        password = st.sidebar.text_input("M·∫≠t kh·∫©u", type="password")

        # Qu√™n m·∫≠t kh·∫©u
        st.sidebar.markdown(
            f'<a href="https://web.facebook.com/profile.php?id=100090786036344" target="_blank">Qu√™n m·∫≠t kh·∫©u?</a>',
            unsafe_allow_html=True,
        )

        # T·∫°o h√†ng c√°c n√∫t "ƒêƒÉng nh·∫≠p", "T·∫°o t√†i kho·∫£n", "ƒêƒÉng nh·∫≠p v·ªõi t∆∞ c√°ch kh√°ch"
        if st.sidebar.button("ƒêƒÉng nh·∫≠p"):
            user = collection.find_one({"username": username, "password": password })
            if user:
                st.sidebar.success("ƒêƒÉng nh·∫≠p th√†nh c√¥ng!")
                st.session_state.id = user['_id']
                st.session_state.username = user['username']
                st.session_state.password = user['password']
                time.sleep(0.1)
                st.session_state.history = user['history']

                st.session_state.logged_in = True
                st.rerun()
            else:
                st.sidebar.error("T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng.")

        
        if st.sidebar.button("T·∫°o t√†i kho·∫£n"):
            st.session_state.create_user = True       

    else:
        # Code x·ª≠ l√Ω sau khi ƒëƒÉng nh·∫≠p v·ªõi t∆∞ c√°ch kh√°ch
        new_username = st.sidebar.text_input("T√™n ƒëƒÉng nh·∫≠p m·ªõi")
        new_password = st.sidebar.text_input("M·∫≠t kh·∫©u m·ªõi", type="password")
        confirm_password = st.sidebar.text_input("X√°c nh·∫≠n m·∫≠t kh·∫©u", type="password")
        if st.sidebar.button("X√°c nh·∫≠n t·∫°o t√†i kho·∫£n"):
            existing_user = collection.find_one({"username": new_username})
            if existing_user:
                st.sidebar.error("T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i.")
            elif confirm_password ==new_password:
                collection.insert_one({"username": new_username, "password": new_password,"history":[]})
                collection.save_data()
                st.sidebar.success("T·∫°o t√†i kho·∫£n th√†nh c√¥ng!, t·ª± ƒë·ªông chuy·ªÉn v·ªÅ ƒëƒÉng nh·∫≠p sau 3 gi√¢y")
                time.sleep(3)
                st.session_state.create_user = False
                st.rerun()
            else:
                st.sidebar.error("Nh·∫≠p l·∫°i m·∫≠t kh·∫©u sai")
        if st.sidebar.button("Quay l·∫°i"):
            st.session_state.create_user = False

    st.sidebar.caption(caption,unsafe_allow_html=True,)
    if st.session_state.show_message_login:
        col1, col2 = st.columns([1,3]) 
        with col1:
            st.markdown(
                """
                <h2 style='display: flex; align-items: center;'>
                    <img src='https://media.giphy.com/media/3owyplYLWlGFQk9mF2/giphy.gif?cid=ecf05e47vlulxckbrh3akfqy8hje45og5qrp42whtigdoh0h&ep=v1_stickers_search&rid=giphy.gif&ct=s' 
                    width='300' height='300' style='margin-right: 0px;'/> 
                </h2>
                """, 
                unsafe_allow_html=True)
        with col2:
            st.write_stream(stream_data_login)
            time.sleep(0.3)

#############################################################################################################
#############################################################################################################
#############################################################################################################
#############################################################################################################
#############################################################################################################
#############################################################################################################
#############################################################################################################
#############################################################################################################
#############################################################################################################

# Giao di·ªán ng∆∞·ªùi d√πng Streamlit

    
else:
    # title c·ªßa c·∫£ giao di·ªán
    st.sidebar.markdown(
        """
        <h2 style='display: flex; align-items: center;'>
            <img src='https://media.giphy.com/media/HMdPmZ6wwlo0idI2PH/giphy.gif' 
            width='50' height='50' style='margin-right: 0px;'/> 
            <span style='font-weight: bold; width: 100%;'>YOUTUBE SEARCH</span>
        </h2>
        """, 
        unsafe_allow_html=True)


    st.sidebar.caption(caption,
        unsafe_allow_html=True,
    )

    #text_input ·ªü layout
    st.session_state.query = st.sidebar.text_input("", placeholder="Nh·∫≠p chu·ªói c·∫ßn t√¨m...")
    #n√∫t t√¨m ki·∫øm ·ªü layout
    
    search_button = st.sidebar.button("**T√¨m ki·∫øm  üîé**", on_click=click_button)
    st.sidebar.markdown(f"""
        <div class="divider">
            <span>Xin ch√†o {st.session_state.username} </span>
        </div>
        """, unsafe_allow_html=True)
    if st.sidebar.button("**üë§ T√†i kho·∫£n**"):
        st.session_state.account = True
    #ƒë∆∞·ªùng ranh l·ªãch s·ª≠ ·ªü layout
    st.sidebar.markdown("""
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
        <div class="divider">
            <i class="fas fa-history"></i><span> L·ªãch s·ª≠</span>
        </div>
        """, unsafe_allow_html=True)

    # Hi·ªÉn th·ªã c√°c button trong sidebar v·ªõi l·ªãch s·ª≠ t√¨m ki·∫øm
    if 'history' in st.session_state and st.session_state.history:
        for i, (iquery,iload,itime,ilen, iresult) in enumerate(st.session_state.history):
            if st.sidebar.button(f"üîó{iquery}", key=f"history_{i}"):
                st.session_state.info = (iquery,iload,itime,ilen,iresult)
                st.session_state.search_triggered = True
                st.session_state.account = False
            
    else:
        st.sidebar.text("Ch∆∞a c√≥ l·ªãch s·ª≠ t√¨m ki·∫øm.")

    if st.session_state.account:
        st.session_state.show_animation = False
        st.session_state.show_message = False
        account_info()
    # S·∫Øp x·∫øp d·ªØ li·ªáu theo ng√†y xu·∫•t b·∫£n t·ª´ m·ªõi nh·∫•t ƒë·∫øn c≈© nh·∫•t
    elif st.session_state.search_triggered:
        st.session_state.show_animation = False
        st.session_state.show_message = False
        info = st.session_state.info
        if info[4]:

            col1, col2 = st.columns([1,2]) 
            with col1:
                st.write(f'Th·ªùi ƒëi·ªÉm: {info[2]} ')
            with col2:
                st.write(f" Th·ªùi gian t√¨m ki·∫øm '{info[0]}': {info[1]}s")   
            
            ### b·∫£ng ng√†y 
            col1, col2 = st.columns([1,1]) 
            with col1:
                start_date = st.date_input("Ng√†y b·∫Øt ƒë·∫ßuüõ´", datetime(2023, 1, 1))
            with col2:
                end_date = st.date_input("Ng√†y k·∫øt th√∫cüõ¨", datetime.utcnow().date())
            start_date_str = start_date.strftime("%Y-%m-%dT%H:%M:%SZ")
            end_date_str = end_date.strftime("%Y-%m-%dT%H:%M:%SZ")
            # L·ªçc k·∫øt qu·∫£ d·ª±a tr√™n th·ªùi gian xu·∫•t b·∫£n
            results_filtered = [item for item in info[4] if start_date_str <= item["Publish Time"] <= end_date_str]
            # results_sorted = sorted(results_filtered, key=lambda x: datetime.strptime(x["Publish Time"], "%Y-%m-%dT%H:%M:%SZ"), reverse=True)
            start_index, end_index = st.slider(
                f"T√¨m th·∫•y {info[3]} k·∫øt qu·∫£ ‚úÖ",
                min_value=1,
                max_value=100,  # C·∫ßn ƒëi·ªÅu ch·ªânh t·ªëi ƒëa theo s·ªë l∆∞·ª£ng video c√≥ th·ªÉ c√≥
                value=(1, 10),  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh, b·∫Øt ƒë·∫ßu t·ª´ video 0 ƒë·∫øn video 10
                step=1
                )
                 
            st.write(f'ƒêang hi·ªÉn th·ªã k·∫øt qu·∫£ t·ª´ {start_index} ƒë·∫øn {end_index}')
            # Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng video theo tr·∫°ng th√°i hi·ªán t·∫°i
            videos_to_display = results_filtered[start_index-1:end_index]

            # T·∫°o c√°c v√πng hi·ªÉn th·ªã theo h√†ng ngang
            for idx, item in enumerate(videos_to_display, start=1):
                # Chia b·ªë c·ª•c th√†nh hai c·ªôt
                num = idx+start_index-1
                st.markdown(f"""
                <div style='text-align: center; '>
                    <hr style='border: 1px solid #555; display: inline-block; width: 2%;'>
                    <span style='position: relative; top: -25px; background: #45434c; color: white; padding: 20px 10px;'>
                        {num}
                    </span>
                    <hr style='border: 1px solid #555; display: inline-block; width: 90%;'>
                </div>
                """, unsafe_allow_html=True)

                col_image, col_info = st.columns([1, 4])  # T·ª∑ l·ªá 1:3 ƒë·ªÉ h√¨nh ·∫£nh nh·ªè h∆°n
                with col_image:
                    # Hi·ªÉn th·ªã s·ªë th·ª© t·ª± b√™n c·∫°nh h√¨nh ·∫£nh
                    st.image(get_video_thumbnail(item["Video ID"]), width=250)
                with col_info:
                    video_link = get_video_link(item["Video ID"])
                    publish_time_formatted = format_publish_time(item["Publish Time"])
                    time_since = time_since_publish(item["Publish Time"])

                    st.markdown(f"[**{item['Video Title']}**]({video_link})")

                    # Th√™m m·ªôt h√†ng ngang ƒë·ªÉ hi·ªÉn th·ªã Channel v√† Publish Time
                    sub_col1, sub_col2 = st.columns(2)
                    with sub_col1:
                        st.write(f"**Channel**: {item['Channel']}")
                    with sub_col2:
                        st.write(f"**Publish Time**: {publish_time_formatted}")
                    sub_col1, sub_col2, sub_col3 = st.columns([1, 1, 1])

                    with sub_col1:
                        st.write(f"{time_since}")

                    with sub_col2:
                        subtitle_btn = st.button("Ph·ª• ƒë·ªÅ üìÉ", key=item["ID"])

                    with sub_col3:
                        video_btn = st.button("Video üéûÔ∏è", key=-item["ID"])

                if subtitle_btn:
                    subtitles = get_subtitles(item["ID"])
                    subtitle,match_counts, phrase_colors = preprocess_subtitles(subtitles,info[0])
                    for phrase, count in match_counts.items():
                        color = phrase_colors[phrase]
                        st.markdown(
                            f"<div style='display: flex; align-items: center; line-height: 1.2; margin-bottom: 5px;'>"
                            f"<span style='display: inline-block; width: 15px; height: 15px; background-color: {color}; margin-right: 5px;'></span>"
                            f"{phrase}: {count} l·∫ßn"
                            f"</div>",
                            unsafe_allow_html=True
                        )
                    # Ki·ªÉm tra n·∫øu t·ª´ kh√≥a t√¨m ki·∫øm kh√¥ng r·ªóng
                # Hi·ªÉn th·ªã ph·ª• ƒë·ªÅ v·ªõi c√°c t·ª´ kh√≥a ƒë∆∞·ª£c t√¥ ƒë·∫≠m
                
                    st.markdown(box_style.format(content=subtitle), unsafe_allow_html=True)    
                    download_subtitles(subtitles, f"{item['Video ID']}_{item['Video Title']}.txt")  
                if video_btn:
                    show_video(video_link)
    elif st.session_state.show_404:
        st.session_state.show_animation = False
        st.session_state.show_message = False
        st.markdown(
                """
                <div style='text-align: center; color: red;'>
                    <h1>404 Not Foundüôá‚Äç‚ôÇÔ∏èüôá‚Äç‚ôÄÔ∏èüôá</h1>
                    <h2>Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£</h2>
                    <h2>
                        <img src='https://media.giphy.com/media/EEFEyXLO9E0YE/giphy.gif?cid=ecf05e479mjja9dt8wwd2pujiwbo57vccfpr2r7adwlqb6za&ep=v1_stickers_search&rid=giphy.gif&ct=s' 
                        width='500' height='500' style='margin-right: 0px;'/> 
                    </h2>
                    <p>Xin l·ªói, ch√∫ng t√¥i kh√¥ng th·ªÉ t√¨m th·∫•y k·∫øt qu·∫£ cho t·ª´ kh√≥a b·∫°n ƒë√£ nh·∫≠p.</p>
                </div>
                """,
                unsafe_allow_html=True
        )


    # if "has_snowed" not in st.session_state:
    #     st.snow()
    #     st.session_state["has_snowed"] = True
    # giao di·ªán ch√†o h·ªèi
    if st.session_state.show_message:
        col1, col2 = st.columns([1,3]) 
        with col1:
            st.markdown(
                """
                <h2 style='display: flex; align-items: center;'>
                    <img src='https://media.giphy.com/media/n1mrBUduOjxgLOpysu/giphy.gif' 
                    width='300' height='300' style='margin-right: 0px;'/> 
                </h2>
                """, 
                unsafe_allow_html=True)
        with col2:
            col1, col2 = st.columns([1,3]) 
            with col1:
                if st.button("Video h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"):
                    show_video("https://www.youtube.com/watch?v=VvvXhNbFWKY")
            with col2:
                st.markdown(
                """
                <h2 style='display: flex; align-items: center;'>
                    <img src='https://media.giphy.com/media/iiesjj8ognaX77Qr50/giphy.gif' 
                    width='500' height='30' style='margin-right: 0px;'/> 
                </h2>
                """, 
                unsafe_allow_html=True)
            st.write_stream(stream_data)
            time.sleep(0.3)
            

    particles_js = """<!DOCTYPE html>
    <html lang="en">
    <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Particles.js</title>
    <style>
    #particles-js {
        position: fixed;
        width: 100vw;
        height: 100vh;
        top: 0;
        left: 0;
        z-index: -1; /* Send the animation to the back */
    }
    .content {
        position: relative;
        z-index: 1;
        color: white;
    }
    
    </style>
    </head>
    <body>
    <div id="particles-js"></div>
    <div class="content">
        <!-- Placeholder for Streamlit content -->
    </div>
    <script src="https://cdn.jsdelivr.net/particles.js/2.0.0/particles.min.js"></script>
    <script>
        particlesJS("particles-js", {
        "particles": {
            "number": {
            "value": 300,
            "density": {
                "enable": true,
                "value_area": 800
            }
            },
            "color": {
            "value": "#ffffff"
            },
            "shape": {
            "type": "circle",
            "stroke": {
                "width": 0,
                "color": "#000000"
            },
            "polygon": {
                "nb_sides": 5
            },
            "image": {
                "src": "img/github.svg",
                "width": 100,
                "height": 100
            }
            },
            "opacity": {
            "value": 0.5,
            "random": false,
            "anim": {
                "enable": false,
                "speed": 5,
                "opacity_min": 0.2,
                "sync": false
            }
            },
            "size": {
            "value": 2,
            "random": true,
            "anim": {
                "enable": false,
                "speed": 400,
                "size_min": 0.1,
                "sync": false
            }
            },
            "line_linked": {
            "enable": true,
            "distance": 100,
            "color": "#ffffff",
            "opacity": 0.22,
            "width": 1
            },
            "move": {
            "enable": true,
            "speed": 2,
            "direction": "none",
            "random": false,
            "straight": false,
            "out_mode": "out",
            "bounce": true,
            "attract": {
                "enable": false,
                "rotateX": 600,
                "rotateY": 1200
            }
            }
        },
        "interactivity": {
            "detect_on": "canvas",
            "events": {
            "onhover": {
                "enable": true,
                "mode": "grab"
            },
            "onclick": {
                "enable": true,
                "mode": "repulse"
            },
            "resize": true
            },
            "modes": {
            "grab": {
                "distance": 100,
                "line_linked": {
                "opacity": 1
                }
            },
            "bubble": {
                "distance": 400,
                "size": 2,
                "duration": 2,
                "opacity": 0.5,
                "speed": 1
            },
            "repulse": {
                "distance": 200,
                "duration": 0.4
            },
            "push": {
                "particles_nb": 2
            },
            "remove": {
                "particles_nb": 3
            }
            }
        },
        "retina_detect": true
        });
    </script>
    </body>
    </html>
    """
    if st.session_state.show_animation:
        components.html(particles_js, height=370, scrolling=False)