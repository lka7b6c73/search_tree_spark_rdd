import streamlit as st
from pymongo import MongoClient
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime

st.set_page_config(page_title="ADMIN", page_icon="üé¨", layout="wide")

# K·∫øt n·ªëi t·ªõi MongoDB
client = MongoClient("mongodb://localhost:27017/")
db = client["YoutubeAPI"]
collection = db["users"]

def manage_accounts():
    st.markdown(
        """
        <h1 style='display: flex; align-items: center;'>
            <img src='https://media.giphy.com/media/9VlcSot7G8JyLm7mZU/giphy.gif?cid=ecf05e4786fzyybrf7gabwc08t05rp7g3x6lyy68kvp7eduf&ep=v1_stickers_search&rid=giphy.gif&ct=s' 
            width='100' height='100' style='margin-left: 600px;'/> 
            <span style='font-weight: bold; width: 100%;'>Qu·∫£n l√Ω T√†i Kho·∫£n</span>
        </h1>
        """, 
        unsafe_allow_html=True)
    
    # L·∫•y danh s√°ch t√†i kho·∫£n t·ª´ c∆° s·ªü d·ªØ li·ªáu
    users = list(collection.find({}))
    if not users:
        st.write("Kh√¥ng c√≥ t√†i kho·∫£n n√†o.")
    else:
        # Chuy·ªÉn ƒë·ªïi danh s√°ch t√†i kho·∫£n th√†nh DataFrame ƒë·ªÉ d·ªÖ hi·ªÉn th·ªã
        df = pd.DataFrame(users)

        # X√≥a c·ªôt 'history' n·∫øu c√≥
        if 'history' in df.columns:
            df = df.drop(columns=['history'])

        # Hi·ªÉn th·ªã m·∫≠t kh·∫©u r√µ r√†ng
        if 'password' in df.columns:
            # Kh√¥ng ·∫©n m·∫≠t kh·∫©u
            pass
        
        col1, col2 = st.columns([1, 1])
        # Hi·ªÉn th·ªã b·∫£ng t√†i kho·∫£n
        with col1:
            st.dataframe(df, width=800)
        
        usernames = [user['username'] for user in users]
        with col2:
            selected_username = st.selectbox("Ch·ªçn t√†i kho·∫£n ƒë·ªÉ ch·ªânh s·ª≠a", usernames)
            # Hi·ªÉn th·ªã th√¥ng tin t√†i kho·∫£n ƒë√£ ch·ªçn
            if selected_username:
                user = collection.find_one({"username": selected_username})
                if user:
                    with st.form(key="edit_account"):
                        st.write(f"S·ª≠a t√†i kho·∫£n: {user['username']}")
                        new_username = st.text_input("T√™n ƒëƒÉng nh·∫≠p m·ªõi", value=user['username'])
                        new_password = st.text_input("M·∫≠t kh·∫©u m·ªõi", type="password", value=user['password'])
                        confirm_password = st.text_input("X√°c nh·∫≠n m·∫≠t kh·∫©u", type="password")
                        col1, col2, col3 = st.columns([1, 1, 1])
                        with col1:
                            if st.form_submit_button("T·∫°o t√†i kho·∫£n"):
                                if new_password == confirm_password:
                                    if collection.find_one({"username": new_username}):
                                        st.error("T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i.")
                                    else:
                                        collection.insert_one({"username": new_username, "password": new_password, "history": []})
                                        st.success("T·∫°o t√†i kho·∫£n th√†nh c√¥ng!")
                                        st.rerun()
                                else:
                                    st.error("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp.")
                        with col2:
                            submitted = st.form_submit_button("C·∫≠p nh·∫≠t t√†i kho·∫£n")
                        if submitted:
                            if new_password == confirm_password:
                                collection.update_one({"username": user['username']}, {"$set": {"username": new_username, "password": new_password}})
                                st.success("Th√¥ng tin t√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!")
                                st.rerun()
                            else:
                                st.error("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp.")
                        with col3:
                            # X√≥a t√†i kho·∫£n
                            if st.form_submit_button(f"X√≥a t√†i kho·∫£n {selected_username}"):
                                collection.delete_one({"username": selected_username})
                                st.success(f"T√†i kho·∫£n {selected_username} ƒë√£ b·ªã x√≥a.")
                                st.rerun()

        # Th·ªëng k√™ query
        st.markdown("<h1 style='text-align: center;'>Th·ªëng k√™ Query</h1>", unsafe_allow_html=True)
        # L·ª±a ch·ªçn lo·∫°i th·ªëng k√™
        options = ["Th·ªëng k√™ t·∫•t c·∫£ t√†i kho·∫£n", "Th·ªëng k√™ theo t√†i kho·∫£n c·ª• th·ªÉ", "Th·ªëng k√™ theo m·ªôt nh√≥m t√†i kho·∫£n"]
        
        

        # Th√™m ph·∫ßn ch·ªçn ng√†y b·∫Øt ƒë·∫ßu v√† ng√†y k·∫øt th√∫c
        col1, col2, col3 = st.columns([2, 1,1])
        with col1:
            selection = st.selectbox("Ch·ªçn lo·∫°i th·ªëng k√™", options)
        with col2:
            start_date = st.date_input("Ng√†y b·∫Øt ƒë·∫ßuüõ´", datetime(2023, 1, 1))
        with col3:
            end_date = st.date_input("Ng√†y k·∫øt th√∫cüõ¨", datetime.utcnow().date())
        
        start_datetime_str = start_date.strftime("%Y-%m-%d")
        end_datetime_str = end_date.strftime("%Y-%m-%d")
        
        if selection == "Th·ªëng k√™ theo t√†i kho·∫£n c·ª• th·ªÉ":
            usernames = [user['username'] for user in collection.find({})]
            with col1:
                selected_username = st.selectbox("Ch·ªçn t√†i kho·∫£n", usernames)
            users = list(collection.find({"username": selected_username}))
        elif selection == "Th·ªëng k√™ theo m·ªôt nh√≥m t√†i kho·∫£n":
            usernames = [user['username'] for user in collection.find({})]
            with col1:
                selected_usernames = st.multiselect("Ch·ªçn c√°c t√†i kho·∫£n", usernames)
            users = list(collection.find({"username": {"$in": selected_usernames}}))
        else:
            users = list(collection.find({}))
        
        query_counts = {}

        for user in users:
            if 'history' in user:
                for entry in user['history']:
                    query = entry[0]
                    time_str = entry[2]  # ƒê·ªãnh d·∫°ng th·ªùi gian trong c∆° s·ªü d·ªØ li·ªáu
    
                    # Chuy·ªÉn ƒë·ªïi chu·ªói th·ªùi gian th√†nh ƒë·ªëi t∆∞·ª£ng datetime
                    try:
                        # if isinstance(time_str, int):
                        #     time_str = str(time_str)
                        time = datetime.strptime(time_str, "%H:%M:%S %d-%m-%Y")
                    except ValueError:
                        continue  # B·ªè qua n·∫øu th·ªùi gian kh√¥ng h·ª£p l·ªá
                    
                    # Ch·ªâ l·ªçc theo ng√†y
                    time_date_str = time.strftime("%Y-%m-%d")

                    if query:
                        # L·ªçc theo th·ªùi gian
                        if start_datetime_str <= time_date_str <= end_datetime_str:
                            if query in query_counts:
                                query_counts[query] += 1
                            else:
                                query_counts[query] = 1

        if query_counts:
            # Hi·ªÉn th·ªã b·∫£ng th·ªëng k√™
            col1, col2 = st.columns([1, 3])
            query_df = pd.DataFrame(list(query_counts.items()), columns=["Query", "Count"])
            with col1:
                st.dataframe(query_df)

            # V·∫Ω bi·ªÉu ƒë·ªì h√¨nh tr√≤n
            fig, ax = plt.subplots()
            ax.pie(query_counts.values(), labels=query_counts.keys(), autopct='%1.1f%%', startangle=90)
            ax.axis("equal")
            with col2:
                st.pyplot(fig)
        else:
            st.write("Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch s·ª≠ ƒë·ªÉ th·ªëng k√™.")

manage_accounts()
